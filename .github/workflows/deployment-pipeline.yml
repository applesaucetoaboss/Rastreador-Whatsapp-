name: Deployment Pipeline

on:
  workflow_run:
    workflows: ["Android Build & Deploy Pipeline"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  deployments: write
  actions: read

env:
  NODE_VERSION: '18'
  DEPLOYMENT_TIMEOUT: '600'

jobs:
  prepare-deployment:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      should_deploy: ${{ steps.config.outputs.should_deploy }}
      deployment_url: ${{ steps.config.outputs.deployment_url }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure Deployment
        id: config
        run: |
          echo "Beginning deployment decision logic..."
          EVENT="${{ github.event_name }}"
          CONCLUSION="${{ github.event.workflow_run.conclusion }}"
          INPUT_ENV="${{ github.event.inputs.environment }}"

          ENVIRONMENT="none"
          SHOULD_DEPLOY="false"

          if [[ "$EVENT" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${INPUT_ENV:-staging}"
            SHOULD_DEPLOY="true"
            echo "Dispatch trigger detected. environment=$ENVIRONMENT should_deploy=$SHOULD_DEPLOY"
          elif [[ "$EVENT" == "workflow_run" && "$CONCLUSION" == "success" ]]; then
            ENVIRONMENT="staging"
            SHOULD_DEPLOY="true"
            echo "Workflow run success detected. environment=$ENVIRONMENT should_deploy=$SHOULD_DEPLOY"
          else
            ENVIRONMENT="none"
            SHOULD_DEPLOY="false"
            echo "Conditions not met. environment=$ENVIRONMENT should_deploy=$SHOULD_DEPLOY (event=$EVENT, conclusion=$CONCLUSION)"
          fi

          # Emit outputs
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT

          # Set deployment URL based on computed environment (not step outputs)
          if [[ "$ENVIRONMENT" == "production" ]]; then
            DEPLOYMENT_URL="https://rastreador-whatsapp.onrender.com"
          elif [[ "$ENVIRONMENT" == "staging" ]]; then
            DEPLOYMENT_URL="https://rastreador-whatsapp-staging.onrender.com"
          else
            DEPLOYMENT_URL=""
          fi
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Log Decision Summary
        run: |
          echo "## üß≠ Deployment Decision" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow Run Conclusion: ${{ github.event.workflow_run.conclusion }}" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ steps.config.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Should Deploy: ${{ steps.config.outputs.should_deploy }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment URL: ${{ steps.config.outputs.deployment_url || '' }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.config.outputs.should_deploy }}" != "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚ÑπÔ∏è Reason for Skip" >> $GITHUB_STEP_SUMMARY
            echo "Deployment conditions evaluated to false. Check trigger type and workflow_run conclusion." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Validate Deployment Prerequisites
        if: steps.config.outputs.should_deploy == 'true'
        run: |
          echo "Validating deployment prerequisites..."
          
          # Check if required secrets are available
          HOOK="${{ secrets.RENDER_DEPLOY_HOOK_URL }}"
          if [[ -z "$HOOK" ]]; then
            HOOK="${{ secrets.RENDER_DEPLOY_HOOK }}"
          fi
          if [[ -z "$HOOK" ]]; then
            echo "‚ùå Render deploy hook secret not found (checked RENDER_DEPLOY_HOOK_URL and RENDER_DEPLOY_HOOK)"
            exit 1
          fi
          
          # Check if server files exist
          if [[ ! -f "server/server.js" ]]; then
            echo "‚ùå Server files not found"
            exit 1
          fi
          
          if [[ ! -f "render.yaml" ]]; then
            echo "‚ùå Render configuration not found"
            exit 1
          fi
          
          echo "‚úÖ All deployment prerequisites validated"

  deploy-server:
    name: Deploy Server to ${{ needs.prepare-deployment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: needs.prepare-deployment.outputs.should_deploy == 'true'
    environment:
      name: ${{ needs.prepare-deployment.outputs.environment }}
      url: ${{ needs.prepare-deployment.outputs.deployment_url }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install Server Dependencies
        working-directory: server
        run: |
          if [[ -f package-lock.json ]]; then
            npm ci --only=production
          else
            npm install --only=production --no-audit --no-fund
          fi

      - name: Validate Server Configuration
        working-directory: server
        run: |
          echo "Validating server configuration..."
          node -c server.js
          
          # Check for required environment variables in .env.example
          if [[ -f .env.example ]]; then
            echo "Required environment variables:"
            grep -E "^[A-Z_]+" .env.example || true
          fi

      - name: Run Server Tests
        if: github.event.inputs.force_deploy != 'true'
        working-directory: server
        run: |
          # Run basic server validation
          timeout 30s node -e "
            const server = require('./server.js');
            console.log('‚úÖ Server starts successfully');
            process.exit(0);
          " || echo "‚ö†Ô∏è Server validation skipped"

      - name: Create Deployment
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ needs.prepare-deployment.outputs.environment }}',
              description: 'Automated deployment via GitHub Actions',
              auto_merge: false,
              required_contexts: []
            });
            return deployment.data.id;

      - name: Trigger Render Deployment
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
          ENVIRONMENT: ${{ needs.prepare-deployment.outputs.environment }}
        run: |
          echo "Triggering Render deployment for $ENVIRONMENT..."
          
          HOOK="$RENDER_DEPLOY_HOOK_URL"
          if [ -z "$HOOK" ]; then
            HOOK="$RENDER_DEPLOY_HOOK"
          fi
          if [ -z "$HOOK" ]; then
            echo "‚ùå No Render deploy hook found in environment variables (RENDER_DEPLOY_HOOK_URL / RENDER_DEPLOY_HOOK)"
            exit 1
          fi

          RESPONSE=$(curl -sS -w "\n%{http_code}" -X POST "$HOOK" \
            --retry 3 --retry-connrefused --retry-delay 5 \
            --max-time ${{ env.DEPLOYMENT_TIMEOUT }})
          
          BODY=$(echo "$RESPONSE" | sed '$d')
          STATUS=$(echo "$RESPONSE" | tail -n1)
          
          echo "HTTP Status: $STATUS"
          echo "Response: $BODY"
          
          if [[ "$STATUS" -lt 200 || "$STATUS" -ge 300 ]]; then
            echo "‚ùå Deployment trigger failed with status $STATUS"
            exit 1
          fi
          
          echo "‚úÖ Deployment triggered successfully"

      - name: Wait for Deployment
        env:
          DEPLOYMENT_URL: ${{ needs.prepare-deployment.outputs.deployment_url }}
        run: |
          echo "Waiting for deployment to complete..."
          echo "Monitoring: $DEPLOYMENT_URL/health"
          
          max_attempts=30
          attempt=1
          
          while [[ $attempt -le $max_attempts ]]; do
            echo "Attempt $attempt/$max_attempts..."
            
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL/health" || echo "000")
            
            if [[ "$STATUS" == "200" ]]; then
              echo "‚úÖ Deployment successful - service is healthy"
              break
            elif [[ "$STATUS" == "000" ]]; then
              echo "‚è≥ Service not yet available..."
            else
              echo "‚ö†Ô∏è Service returned status $STATUS"
            fi
            
            if [[ $attempt -eq $max_attempts ]]; then
              echo "‚ùå Deployment validation failed after $max_attempts attempts"
              exit 1
            fi
            
            sleep 20
            attempt=$((attempt + 1))
          done

      - name: Update Deployment Status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const deploymentId = ${{ steps.deployment.outputs.result }};
            const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deploymentId,
              state: state,
              environment_url: '${{ needs.prepare-deployment.outputs.deployment_url }}',
              description: state === 'success' ? 'Deployment completed successfully' : 'Deployment failed'
            });

      - name: Post-Deployment Validation
        if: success()
        env:
          DEPLOYMENT_URL: ${{ needs.prepare-deployment.outputs.deployment_url }}
        run: |
          echo "Running post-deployment validation..."
          
          # Test health endpoint
          curl -f "$DEPLOYMENT_URL/health" || exit 1
          
          # Test basic API endpoints
          curl -f "$DEPLOYMENT_URL/" || exit 1
          
          echo "‚úÖ Post-deployment validation completed"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [prepare-deployment, deploy-server]
    if: always() && needs.prepare-deployment.outputs.should_deploy == 'true'
    
    steps:
      - name: Create Deployment Summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.prepare-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.deploy-server.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ needs.prepare-deployment.outputs.deployment_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-server.result }}" == "success" ]]; then
            echo "‚úÖ Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Deployment failed. Check logs for details." >> $GITHUB_STEP_SUMMARY
          fi

  notify-skipped:
    name: Explain Skipped Deployment
    runs-on: ubuntu-latest
    needs: [prepare-deployment]
    if: needs.prepare-deployment.outputs.should_deploy != 'true'
    steps:
      - name: Deployment Skipped Summary
        run: |
          echo "## üõë Deployment Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow Run Conclusion: ${{ github.event.workflow_run.conclusion }}" >> $GITHUB_STEP_SUMMARY
          echo "- Evaluated Environment: ${{ needs.prepare-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Should Deploy: ${{ needs.prepare-deployment.outputs.should_deploy }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Why This Was Skipped" >> $GITHUB_STEP_SUMMARY
          echo "The deployment decision logic evaluated to false. Common causes:" >> $GITHUB_STEP_SUMMARY
          echo "- Non-success conclusion from upstream workflow_run" >> $GITHUB_STEP_SUMMARY
          echo "- Manual dispatch not used or environment not provided" >> $GITHUB_STEP_SUMMARY
          echo "- Repository or secrets configuration missing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ How to Proceed" >> $GITHUB_STEP_SUMMARY
          echo "- Re-run Android build ensuring it finishes with 'success'" >> $GITHUB_STEP_SUMMARY
          echo "- Use 'Run workflow' and select environment if dispatching manually" >> $GITHUB_STEP_SUMMARY
          echo "- Verify required secrets (e.g., RENDER_DEPLOY_HOOK_URL) are configured" >> $GITHUB_STEP_SUMMARY
