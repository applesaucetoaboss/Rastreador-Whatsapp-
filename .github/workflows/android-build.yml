name: Build Android APK (unzip + generate wrapper if placeholder + build)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Show repo root (diagnostic)
        run: |
          echo '---- repo root listing ----'
          ls -la
          echo '---- end repo root listing ----'
        shell: bash

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install common packages (wget/unzip/git/rsync)
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y wget unzip git ca-certificates apt-transport-https gnupg rsync
        shell: bash



      - name: Set GRADLE_VERSION environment variable
        run: echo "GRADLE_VERSION=8.7" >> $GITHUB_ENV
        shell: bash

      - name: Install Gradle CLI 8.0.2 (for wrapper generation)
        run: |
          set -euo pipefail
          GRADLE_VERSION=${{ env.GRADLE_VERSION }}
          GRADLE_DIR="$RUNNER_TEMP/gradle"
          mkdir -p "$GRADLE_DIR"
          wget -q "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip" -O gradle.zip
          unzip -q gradle.zip -d "$GRADLE_DIR"
          echo "$GRADLE_DIR/gradle-${GRADLE_VERSION}/bin" >> $GITHUB_PATH
          rm -f gradle.zip
        shell: bash

      - name: Install Android command-line tools and SDK packages
        run: |
          ANDROID_SDK_ROOT="$RUNNER_TEMP/android-sdk"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline.zip
          unzip -q cmdline.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools/"* "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          # expose sdkmanager and platform-tools to following steps
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-34" "build-tools;34.0.0" || true
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --licenses || true
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        shell: bash

      - name: Skip zip merge when project files already exist
        run: |
          set -euo pipefail
          if [ -f build.gradle ] && [ -f app/build.gradle ] && [ -f settings.gradle ]; then
            echo "Gradle project detected; skipping zip merge."
          else
            echo "Project files missing; checking for zip archives to hydrate."
            mkdir -p extracted
            shopt -s nullglob || true
            zips=( *.zip )
            if [ "${#zips[@]}" -gt 0 ]; then
              echo "ZIP files found: ${zips[*]}"
              for z in "${zips[@]}"; do
                echo "Unzipping $z -> extracted/"
                unzip -o "$z" -d extracted
              done
              echo "Merging extracted contents into repo root (preserving .git)"
              rsync -a --exclude '.git' extracted/ ./
              ls -la
            else
              echo "No zip files found in repo root."
            fi
          fi
        shell: bash

      - name: Ensure Gradle wrapper exists (generate if placeholder or missing)
        run: |
          set -euo pipefail
          # Use the downloaded Gradle CLI (in PATH) to generate a real wrapper if needed
          if [ ! -f ./gradlew ] || grep -q "placeholder gradlew" ./gradlew 2>/dev/null || grep -q "placeholder gradlew" ./gradlew.bat 2>/dev/null; then
            echo "Gradle wrapper missing or placeholder detected â€” generating wrapper with downloaded gradle"
            gradle wrapper --gradle-version 8.7
            chmod +x ./gradlew || true
          else
            echo "Gradle wrapper appears present and not placeholder"
          fi
        shell: bash

      - name: Print debugRuntimeClasspath dependency tree (diagnostics)
        run: |
          set -euo pipefail
          ./gradlew :app:dependencies --configuration debugRuntimeClasspath --no-daemon --console=plain | tee dependencies-debugRuntimeClasspath.txt
        shell: bash

      - name: Upload dependency tree artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debugRuntimeClasspath-dependencies
          path: dependencies-debugRuntimeClasspath.txt



      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Aggressively clean Gradle cache and build directories
        run: |
          rm -rf ~/.gradle
          rm -rf app/build
        shell: bash

      - name: Build APK (assembleDebug)
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
        run: |
          set -euo pipefail
          export TERM=dumb
          # Capture full gradle output to a file, then on failure print a concise summary
          ./gradlew assembleDebug --no-daemon --stacktrace --console=plain --info --refresh-dependencies | tee build.log
          EXIT_CODE=${PIPESTATUS[0]}
          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "\n--- Build failed: concise error summary (last 300 lines) ---"
            tail -n 300 build.log
            echo "--- End summary ---\n"
          fi
          exit "$EXIT_CODE"
        shell: bash

      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: app/build/outputs/**/*.apk
      - name: Upload Gradle build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-build-log
          path: build.log

      - name: Commit logs to ci-logs branch for assistant access
        if: always()
        run: |
          set -euo pipefail
          mkdir -p gh_actions_logs/${{ github.run_id }}
          if [ -f build.log ]; then cp -f build.log gh_actions_logs/${{ github.run_id }}/build.log; fi
          if [ -f dependencies-debugRuntimeClasspath.txt ]; then cp -f dependencies-debugRuntimeClasspath.txt gh_actions_logs/${{ github.run_id }}/dependencies-debugRuntimeClasspath.txt; fi
          # record minimal env info
          ./gradlew -v > gh_actions_logs/${{ github.run_id }}/gradle-env.txt || true
          echo "AGP_VERSION=8.7.0" > gh_actions_logs/${{ github.run_id }}/env.txt
          echo "JAVA_VERSION=$(java -version 2>&1 | head -n1)" >> gh_actions_logs/${{ github.run_id }}/env.txt
          echo "RUN_ID=${{ github.run_id }}" >> gh_actions_logs/${{ github.run_id }}/env.txt
          # prepare git and push to ci-logs branch
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git fetch origin ci-logs || true
          git checkout -B ci-logs
          git add gh_actions_logs/${{ github.run_id }}/
          git commit -m "CI logs for run ${{ github.run_id }} [skip ci]" || true
          git push origin ci-logs
        shell: bash
